#======================================================================================================================
# §package      Shell::Shell
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
package Shell::Shell;

use strict ;

use Shell::Console qw (
    NewConsole
) ;

use Shell::CommandLoader ;
use Shell::Arguments ; 

my $BasicCommandsPath = 'Shell/Command' ;

my $aBasicCommandsList = [
    "$BasicCommandsPath/Alias",
    "$BasicCommandsPath/Clear",
    "$BasicCommandsPath/Config",
    "$BasicCommandsPath/Echo",
    "$BasicCommandsPath/Pause",
    "$BasicCommandsPath/Quiet",
    "$BasicCommandsPath/Quit",
    "$BasicCommandsPath/Help"
] ;

#======================================================================================================================
# §function     new
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       my $Shell = Shell::Shell->new( $hOptions ) ;
#----------------------------------------------------------------------------------------------------------------------
# §description  Shell constructor
#----------------------------------------------------------------------------------------------------------------------
# §input        $hOptions | Construction options | hash.ref
#----------------------------------------------------------------------------------------------------------------------
# §return       $Shell | New object instance | object
#======================================================================================================================
sub new {
    my $class = shift;

    my $hOptions = $_[0] // {} ;

    my $hAttributes = {
        'Exit'          => 0,
        'Name'          => 'she',
        'Title'         => 'Simple shell v1',
        'HelpTxt'       => "Type 'help' or '?' for help\n",
        'Debug'         => 0,
        'Prompt'        => '> ',
    } ;
    
    my $self = bless( { %$hAttributes, %$hOptions }, $class );

    $self->_parseArguments() ;
    $self->_initConsole() ;
    $self->_initCommands() ;
    
    return $self ;
}

#======================================================================================================================
# §function     _parseArguments
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->_parseArguments()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _parseArguments {
    my $self = shift;

    my $Arguments = Shell::Arguments->new( $self->_getArgumentsMetaData() ) ;

    $Arguments->parseFromArray( $self->{'Arguments'} ) ;
    
    $self->{'Arguments'} = $Arguments ;
    
    if ( $Arguments->getArguments()->{'Help'} ) {
        $self->help() ;    
    }
    
    
    return ;
}

#======================================================================================================================
# §function     _getArgumentsMetaData
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $aArguments = $Shell->_getArgumentsMetaData() ;
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $hArgumens | Arguments specification for the command | hash.ref
#======================================================================================================================
sub _getArgumentsMetaData {
    my $self = shift;

    return {
        'NoPager'           => [ 'nopager',     0 ],
        'Prompt'            => [ 'prompt',      0 ],
        'NoHeader'          => [ 'noheader',    0 ],
        'Help'              => [ 'help',        0 ],
        'BatchFileName'     => [ 'batch=s',     undef ],
    } ;
}

#======================================================================================================================
# §function     _initConsole
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->_initConsole()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _initConsole {
    my $self = shift;

    $self->{'Console'} = NewConsole( $self ) ;
    
    return ;
}

#======================================================================================================================
# §function     _initCommands
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->_initCommands()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _initCommands {
    my $self = shift;

    my $aCommandsList = [] ;
    $self->{'CommandsList'} = $aCommandsList ;
    
    my $CommandLoader = Shell::CommandLoader->new( $self ) ;
    $self->_loadCommands( $CommandLoader, $aBasicCommandsList ) ;
    $self->_loadCommands( $CommandLoader, $self->{'Commands'} ) ;
    
    my $aCommandsNames = [] ;
    my $hCommandsHash = {} ;

    foreach my $Command ( @$aCommandsList ) {
        my $CommandName = lc ( $Command->getName() ) ;
        my $aCommandAlias = $Command->getAlias() ;
        $hCommandsHash->{$CommandName} = $Command ;
        push( @$aCommandsNames, $CommandName ) ;
        if ( defined $aCommandAlias ) {
            foreach my $Alias ( @$aCommandAlias ) {
                $hCommandsHash->{lc( $Alias )} = $Command ;
            }
        }
    }

    $self->{'CommandsHash'} = $hCommandsHash ;
    $self->{'CommandsNames'} = [ sort @$aCommandsNames ] ;
    
    return ;
}

#======================================================================================================================
# §function     _loadCommands
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->_loadCommands( $CommandsList, $CommandLoader, $aCommandsPathList )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _loadCommands {
    my $self = shift;

    my ( $CommandLoader, $aCommandsPathList ) = @_ ;

    my $aCommandsList = $self->{'CommandsList'} ;
    if ( defined $aCommandsPathList ) {
        foreach my $CommandPath ( @$aCommandsPathList ) {
            my $Command = $CommandLoader->loadCommand( $CommandPath ) ;
            if ( defined $Command ) {
                push( 
                    @$aCommandsList,
                    $Command 
                ) ;
            }
        }
    }

    return ;
}

#======================================================================================================================
# §function     getConsole
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->getConsole()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $Console | TODO | object
#======================================================================================================================
sub getConsole {
    my $self = shift;

    return $self->{'Console'} ;
}

#======================================================================================================================
# §function     getArguments
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $aArguments = $Shell->getArguments() ;
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $hArgumens | Arguments specification for the command | hash.ref
#======================================================================================================================
sub getArguments {
    my $self = shift;

    return $self->{'Arguments'}->getArguments() ;
}

#======================================================================================================================
# §function     getAllCommands
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->getAllCommands()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $CommandsList | TODO | array.object
#======================================================================================================================
sub getAllCommands {
    my $self = shift;

    return $self->{'CommandsList'} ;
}

#======================================================================================================================
# §function     getCommand
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->getCommand( $CommandName )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $CommandName | TODO | string
#----------------------------------------------------------------------------------------------------------------------
# §return       $Command | TODO | object
#======================================================================================================================
sub getCommand {
    my $self = shift;

    my ( $CommandName ) = @_ ;

    return $self->{'CommandsHash'}->{$CommandName} ;
}

#======================================================================================================================
# §function     getCommandNames
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->getCommandNames()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $CommandNamesList | TODO | array.string
#======================================================================================================================
sub getCommandNames {
    my $self = shift;

    return $self->{'CommandsNames'} ;
}


#======================================================================================================================
# §function     printHeader
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->printHeader()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub printHeader {
    my $self = shift;

    if ( not $self->getArguments()->{'NoHeader'} ) {
        my $Console = $self->getConsole() ;
        $Console->reset() ;
        $Console->output(
            "\n%s\n%s%s\n",
            $self->{'Title'},
            $self->getHeaderText(),
            $self->getHelpText()
        ) ;
    }
    
    return;
}

#======================================================================================================================
# §function     getHeaderText
# §state        protected
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->getHeaderText()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       Header | TODO | string
#======================================================================================================================
sub getHeaderText {
    my $self = shift;

    return '';
}

#======================================================================================================================
# §function     getHelpText
# §state        protected
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->getHelpText()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $HelpText | TODO | string
#======================================================================================================================
sub getHelpText {
    my $self = shift;

    return "Type 'help' or '?' for help\n" ;
}

#======================================================================================================================
# §function     run
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->run()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub run {
    my $self = shift;

    $self->_begin() ;
    $self->_run() ;
    $self->_end() ;

    return;
}

#======================================================================================================================
# §function     _begin
# §state        protected
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->_begin()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _begin {
    my $self = shift;

    my $Console = $self->getConsole() ;
    $Console->open() ;
        
    return;
}

#======================================================================================================================
# §function     _run
# §state        protected
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->_run()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _run {
    my $self = shift;

    my $Console = $self->getConsole() ;
    $self->{'Exit'} = 0 ;
    while ( not $self->{'Exit'} ) {
        my $UserInput = $Console->prompt( "%s", $self->{'Prompt'} ) ;
        $UserInput =~ m/^\s*(\S*)\s*(.*)/ ;
        my $CommandName = $1 ;
        my $CommandArgs = $2 ;
        $Console->reset() ;
        $self->executeCommand( $CommandName, $CommandArgs ) ;
    }
        
    return;
}

#======================================================================================================================
# §function     _end
# §state        protected
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->_end()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _end {
    my $self = shift;

    my $Console = $self->getConsole() ;
    $Console->close() ;
        
    return;
}

#======================================================================================================================
# §function     executeCommand
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->executeCommand( $CommandName, $CommandArgs )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $CommandName | TODO | string
# §input        $CommandArgs | TODO | string
#======================================================================================================================
sub executeCommand {
    my $self = shift;

    my ( $CommandName, $CommandArgs ) = @_ ;

    if ( length( $CommandName ) 
         && $CommandName !~ /^\s*#/ ) {
        my $Console = $self->getConsole() ;
        my $CommandKey = lc( $CommandName ) ;
        if ( defined $self->{'CommandsHash'}->{$CommandKey} ) {
            my $Command = $self->{'CommandsHash'}->{$CommandKey} ;
            eval {
                $Command->execute( $CommandArgs ) ;
            };
            if ( $@ ) {
                $self->error( $@ ) ;
            }
        } else {
            $Console->output(
                "ERROR: Unknown command '%s'.\n%s\n",
                $CommandName,
                $self->{'HelpTxt'}
            ) ;
        }
    }
    
    return;
}

#======================================================================================================================
# §function     exit
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->exit( $ShowByeText )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $ShowByeText | TODO | boolean
#======================================================================================================================
sub exit {
    my $self = shift;

    my ( $ShowByeText ) = @_ ;
    
    if ( $ShowByeText ) {
        $self->getConsole()->output( "\nExit shell. Bye !\n\n" ) ;
    }

    $self->{'Exit'} = 1 ;

    return ;
}

#======================================================================================================================
# §function     error
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->error( $@ )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $ShowByeText | TODO | boolean
#======================================================================================================================
sub error {
    my $self = shift;

    $self->getConsole()->error( @_ ) ;

    return ;
}

#======================================================================================================================
# §function     help
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Shell->help()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub help {
    my $self = shift;

    my $Title = $self->{'Title'} ;
    my $Name = $self->{'Name'} ;
        
    print <<END_USAGE;

$Title

Usage:
    $Name [ flags ]  [ options ] [ StoreName [ ObjectPath ] ]

Flags (optional):
    -help           Shows this help
    -noheader       Don't print the starting help header
    -nopager        Disable pager
    -prompt         Enable print prompt in Batch mode 
    
Options:
    -batch          Batch mode: execute specified text file (optional)

Arguments:
    Storename       Connect to the StoreName (optional)
    ObjectPath      And select the object by path (optional)

Examples:
    $Name 
    $Name Store /Shops/DemoShop
    $Name -nopager -noheader Site
    $Name -prompt -batch script.txt

END_USAGE

    exit 2;
}

1;
