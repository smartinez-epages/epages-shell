#======================================================================================================================
# §package      Shell::Consoles::Terminalconsole
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
package Shell::Consoles::TerminalConsole;
use base Shell::Console;

use strict ;

use Term::ReadKey;

use Data::Dumper;

$Data::Dumper::Indent = 1 ;

#======================================================================================================================
# §function     new
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       my $console = Shell::Console->new( $hOptions ) ;
#----------------------------------------------------------------------------------------------------------------------
# §description  Console constructor
#----------------------------------------------------------------------------------------------------------------------
# §input        $hOptions | Construction options | hash.ref
#----------------------------------------------------------------------------------------------------------------------
# §return       $Shell | New object instance | object
#======================================================================================================================
sub new {
    my $class = shift;

    my ( $hOptions ) = @_ ;

    system( 'stty erase ^H' ) ;

    my $hAttributes = {
        'Pager'         => 1,
        'PagerCmd'      => 0,
        'PagerMax'      => 0,
        'PagerCount'    => 0
    } ;
    
    return $class->SUPER::new( { %$hAttributes, %$hOptions }, $class );
}

#======================================================================================================================
# §function     reset
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->reset()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub reset() {
    my $self = shift;

    $self->{'PagerCmd'} = $self->{'Pager'} ;
    if ( $self->{'PagerCmd'} ) {
        $self->{'PagerCount'} =  0 ;
        $self->{'PagerMax'} =  (GetTerminalSize())[1] - 2 ;
    }

    return ;
}

#======================================================================================================================
# §function     prompt
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Input = $Console->prompt( $Format, ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Format | TODO | string
#----------------------------------------------------------------------------------------------------------------------
# §return       $Input | TODO | string
#======================================================================================================================
sub prompt {
    my $self = shift;

    my $Format = shift ;
    printf( $Format, @_ ) ;
    my $Input = ReadLine(0) ;
    $Input =~ s/^\s+|\s+$//g ;
    
    return $Input ;
}

#======================================================================================================================
# §function     output
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->output( $Format, ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Format | TODO | string
#----------------------------------------------------------------------------------------------------------------------
# §return       $Name | TODO | type
#======================================================================================================================
sub output {
    my $self = shift;

    my $Format = shift ;
    my $Text = sprintf( $Format, @_ ) ;
    if ( $self->{'PagerCmd'} ) {
        return $self->_printWithPager( $Text ) ;
    } else {
        print( $Text ) ;
    }
    
    return 1 ;
}

#======================================================================================================================
# §function     _printWithPager
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->_printWithPager()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $Continue | TODO | boolean
#======================================================================================================================
sub _printWithPager {
    my $self = shift;

    my ( $Text ) = @_ ;

    my $TerminalColumns = (GetTerminalSize())[0] ;
    my @TextLines = split( /^/m, $Text ) ; 

    foreach my $Line ( @TextLines ) {
        my $LineLength = length( $Line ) ;
        for( my $Offset = 0 ; $Offset < $LineLength ; $Offset += $TerminalColumns ) {
            if ( $Offset > 0 ) {
                print( "\n" ) ;
            }
            if ( $Line =~ /\n$/ ) {
                if ( not $self->_checkPager() ) {
                    return 0 ;
                }
            }
            print( substr( $Line, $Offset, $TerminalColumns ) ) ;
        }
    }
    
    return 1 ;
}

#======================================================================================================================
# §function     _checkPager
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->_checkPager()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $Continue | TODO | boolean
#======================================================================================================================
sub _checkPager {
    my $self = shift;

    $self->{'PagerCount'} ++ ;
    if ( $self->{'PagerCount'} >= $self->{'PagerMax'} ) {
        $self->{'PagerCount'} = 0 ;
        my $KeyPressed = $self->_pauseOutput() ;
        if ( $KeyPressed == 27 ) {
            return 0 ;
        } elsif ( $KeyPressed == 10 ) {
            $self->{'PagerCmd'} = 0 ;
        }
    } 

    return 1 ;
}

#======================================================================================================================
# §function     _pauseOutput
# §state        private
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->_pauseOutput()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §return       $KeyPressed | TODO | char
#======================================================================================================================
sub _pauseOutput() {
    my $self = shift;

    print "<<<< Press any key to continue, RETURN to disable pager, ESC to stop output >>>>";

    ReadMode 'raw';
    my $KeyPressed = ReadKey(0);
    ReadMode 'restore';

    print "\r                                                                                     \r";

    return ord( $KeyPressed );
}

1;
