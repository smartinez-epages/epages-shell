#======================================================================================================================
# §package      Shell::Console::Console
#----------------------------------------------------------------------------------------------------------------------
# §description  Abstract Console Class
#======================================================================================================================
package Shell::Console::Console;

use strict;

use Exporter 'import';

our @EXPORT_OK = qw (
    NewConsole
);

use Shell::Console::TerminalConsole;
use Shell::Console::BatchConsole;

use Data::Dumper;
$Data::Dumper::Indent = 1;

#======================================================================================================================
# §function     NewConsole
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console = NewConsole( $Shell )
#----------------------------------------------------------------------------------------------------------------------
# §description  Factory function ... TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Shell | TODO | object
#----------------------------------------------------------------------------------------------------------------------
# §return       $Console | TODO | object
#======================================================================================================================
sub NewConsole {
    my ($Shell) = @_;

    my $Console = undef;
    my $Arguments = $Shell->getArguments();
    my $BatchFileName = $Arguments->{'BatchFileName'};

    if (defined $BatchFileName) {
        $Console =  Shell::Console::BatchConsole->new({
                        'Shell'         => $Shell,
                        'FileName'      => $BatchFileName,
                        'ShowPrompt'    => $Arguments->{'ShowPrompt'}
                    });
    } else {
        $Console =  Shell::Console::TerminalConsole->new({
                        'Shell'     => $Shell,
                        'Pager'     => ($Arguments->{'NoPager'})? 'off' : 'on'
                    });
    }

    return $Console;
}

#======================================================================================================================
# §function     new
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       my $console = Shell::Console->new( $hOptions );
#----------------------------------------------------------------------------------------------------------------------
# §description  Console constructor
#----------------------------------------------------------------------------------------------------------------------
# §input        $hOptions | Construction options | hash.ref
#----------------------------------------------------------------------------------------------------------------------
# §return       $Shell | New object instance | object
#======================================================================================================================
sub new {
    my $class = shift;
    my ($hOptions) = @_;

    my $hAttributes = {
        'Verbosity'   => 'normal'
    };

    my $self = bless( { %$hAttributes, %$hOptions }, $class );

    $self->_addConfigurationProperties();

    return $self;
}

#======================================================================================================================
# §function     addConfigurationProperties
# §state        protected
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->_addConfigurationProperties()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub _addConfigurationProperties() {
    my $self = shift;

    my $Configuration = $self->{'Shell'}->getConfiguration();
    
    my $VerboseConfigProperty = $Configuration->addProperty({
                                    'Name'          => 'verbose',
                                    'Value'         => 'normal',
                                    'Description'   => 'Verbose level : mute, normal, debug',
                                    'Validator'     => sub {
                                        return shift =~ /^mute|normal|debug$/i;
                                    },
                                    'Filter'        => sub {
                                        return lc(shift);
                                    }
                                });
    $VerboseConfigProperty->addListener($self);

    return;
}

#======================================================================================================================
# §function     notifyConfigChange
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->notifyConfigChange($PeropertyName, $PropertyValue)
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub notifyConfigChange() {
    my $self = shift;
    my ($PropertyName, $PropertyValue) = @_;

    if ($PropertyName eq 'verbose') {
        $self->setVerbosity($PropertyValue);
    }

    return;
}

#======================================================================================================================
# §function     setVerbosity
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->setVerbosity( $Verbosity )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Data | TODO | any
#======================================================================================================================
sub setVerbosity {
    my $self = shift;
    my ($Verbosity) = @_;

    $self->{'Verbosity'} =  $Verbosity;

    return;
}

#======================================================================================================================
# §function     getVerbosity
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->getVerbosity()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Data | TODO | any
#======================================================================================================================
sub getVerbosity {
    my $self = shift;

    return $self->{'Verbosity'};
}

#======================================================================================================================
# §function     error
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->error( ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Data | TODO | any
#======================================================================================================================
sub error {
    my $self = shift;

    $self->output( "\nERROR : @_\n" );

    return;
}

#======================================================================================================================
# §function     dump
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->dump( ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Data | TODO | any
#======================================================================================================================
sub dump {
    my $self = shift;

    $self->output( Dumper( @_ ) );

    return;
}

#======================================================================================================================
# §function     debug
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->debug( $Format, ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Format | TODO | string
#======================================================================================================================
sub debug {
    my $self = shift;

    if ( $self->{'Verbosity'} eq 'debug' ) {
        my $Format = shift;
        $self->output( "DEBUG: $Format", @_ );
    }

    return;
}

#======================================================================================================================
# §function     open
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->open()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub open { return; }

#======================================================================================================================
# §function     close
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->close()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub close { return; }

#======================================================================================================================
# §function     reset
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->reset()
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#======================================================================================================================
sub reset { return; }

#======================================================================================================================
# §function     prompt
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Input = $Console->prompt( $Format, ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Format | TODO | string
#----------------------------------------------------------------------------------------------------------------------
# §return       $Input | TODO | string
#======================================================================================================================
sub prompt { return ''; }

#======================================================================================================================
# §function     info
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->info( $Format, ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Format | TODO | string
#----------------------------------------------------------------------------------------------------------------------
# §return       $Name | TODO | type
#======================================================================================================================
sub info {
    my $self = shift;

    if ( $self->{'Verbosity'} ne 'mute' ) {
        $self->output( @_ );
    }

    return;
}

#======================================================================================================================
# §function     output
# §state        public
#----------------------------------------------------------------------------------------------------------------------
# §syntax       $Console->output( $Format, ... )
#----------------------------------------------------------------------------------------------------------------------
# §description  TODO
#----------------------------------------------------------------------------------------------------------------------
# §input        $Format | TODO | string
#----------------------------------------------------------------------------------------------------------------------
# §return       $Continue | TODO | boolean
#======================================================================================================================
sub output { return 1; }

1;
